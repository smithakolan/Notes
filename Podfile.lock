# Notes



type([inventa, kia, toyota]).
city([pecs, budapest, gyor, szeged]).
sales(pecs, kia, 20180502, sally, 500000).
sales(budapest, toyota, 20180502, sally, 500000).
sales(pecs, toyota, 20180502, sally, 500000).
sales(gyor, inventa, 20180502, sally, 100000).


:-dynamic sales/5.

displayMenu :- writeln("**********************************\n--------- FIREBIRD -----------\n**********************************\n").

selectCity(City) :- city(X), writeln(X), writeln("Select city"), read(City).

buying(City, Type, Date, Customer, Price) :- type(Types), writeln(Types), writeln("Select Type of Car:"), read(Type), writeln("Enter Date(YYYYMMDD)"), read(Date), writeln("Enter your name: "), read(Customer), writeln("Enter price:"), read(Price), assert(sales(City, Type, Date, Customer, Price)).

start :- displayMenu, selectCity(City), buying(City, Type, Date, Customer, Price).


%STATISTICS

% Returns total revenue of sales by type of car
typeSales(Type, S) :- bagof(Price, City^Date^Customer^sales(City, Type, Date, Customer, Price), SL), sum(SL, S).

% Returns type of car sold according to number of cars sold
numberSales(Type, N) :- bagof(Price, City^Date^Customer^Price^sales(City, Type, Date, Customer, Price), SL), length(SL, N), assert(typeQuatity(Type, N)).

% Returns decreasing list of
sortbytype(Output) :- findall([X,Y],typeQuatity(X,Y),List),
sort(2, @>, List, OrderedList),
Output = OrderedList.

mostSales(City, S) :- bagof(Price, Type^Date^Customer^sales(City, Type
                                                           , Date, Customer, Price), SL), sum(SL, S), writeln(S).



% Returns type, sales by year
byYear(Year, S, Type) :- bagof(Price, City^Date^Customer^(sales(City, Type, Date, Customer, Price), Year is Date // 10000), SL), sum(SL, S), assert(typeRevenue(Type, S)).

% Returns decreasing list of
sortbytypeyear(Output) :- findall([X,Y],typeRevenue(X,Y),List),
sort(2, @>, List, OrderedList),
Output = OrderedList.

% Returns total revenue of sales by city
citySalesRevenue(City, S) :- bagof(Price, Type^Date^Customer^sales(City, Type, Date, Customer, Price), SL), sum(SL, S).

% Returns number of cars sold
citySalesNumber(City, N) :- bagof(Price, Type^Date^Customer^sales(City, Type, Date, Customer, Price), SL), length(SL, N).

citySalesByYear(Year, S, City) :- bagof(Price, Type^Date^Customer^(sales(City, Type, Date, Customer, Price), Year is Date // 10000), SL), sum(SL, S), assert(cityRevenue(City, S)).

sortbycityyear(Output) :- findall([X,Y],cityRevenue(X,Y),List),
sort(2, @>, List, OrderedList),
Output = OrderedList.

sum([], 0).
sum([H|T], S) :- sum(T, S1), S is S1 + H.


%Movie Data
movie_data(avengers, pecsCC, 10, 0).
movie_data(avengers, budapestCC, 20, 0).
movie_data(avengers, gyorCC, 20, 0).
movie_data(avengers, szegedCC, 10, 0).
movie_data(it, pecsCC, 10, 0).
movie_data(it, budapestCC, 20, 0).
movie_data(it, szegedCC, 15, 0).

%All the movies available
movie([avengers, it]).

:- dynamic movie_data/4.

%Replace existing fact
replace_existing_fact(OldFact, NewFact) :- call(OldFact), retract(OldFact), assert(NewFact).

header :- writeln("------------ CINEMA CITY -----------"), writeln("Pick a movie: ").

pickTheatre(Theatre) :- writeln("Pick a theatre"), read(Theatre).

pickSeats(Seats) :- writeln("How many seats do you need?"), read(X).

% Start the ticket buyer
start :- header, movie(Movies), writeln(Movies), read(Selected_Movie), findall(Theatres, movie_data(Selected_Movie, Theatres, _, _), ListTheatres), writeln(ListTheatres), pickTheatre(Theatre), pickSeats(Seats), Cost is Seats * 1000, writef("You owe %w Ft.\n", [Cost]), movie_data(Selected_Movie, Theatre,X, Y), Z is Y + Seats, replace_existing_fact(movie_data(Selected_Movie, Theatre, X, Y), movie_data(Selected_Movie, Theatre, X, Z)), writeln("Would you like to buy more tickets?(y or n)"), read(Decision), (Decision == y -> start; Decision == n -> writeln("Thank you for shopping with us"); write('\nInvalid Input!!!\n'),fail).

%Find which theatre recieved most guests
theatreGuests(Theatre, G) :- bagof(Seats, Movie^Capacity^movie_data(Movie, Theatre, Capacity, Seats), SL), sum(SL, G).

%wHCIH movie was seen the most
movieGuests(Movie, G) :- bagof(Seats, Theatre^Capacity^movie_data(Movie, Theatre, Capacity, Seats), SL), sum(SL, G).

%hoW MANY guests visited all together
allGuests(G) :- bagof(Seats, Theatre^Movie^Capacity^movie_data(Movie, Theatre, Capacity, Seats), SL), sum(SL, G).

%Gives Income of each theatre
theatreIncome(Theatre, G) :- bagof(Seats, Movie^Capacity^movie_data(Movie, Theatre, Capacity, Seats), SL), sum(SL, X), G is 1000 * X, assert(income(Theatre, G)).

% Sorts income of theatre in decreasing order.
sortTheatreIncome(Output) :- findall([X,Y],income(X,Y),List),
sort(2, @>, List, OrderedList),
Output = OrderedList.


sum([], 0).
sum([H|T], S) :- sum(T, S1), S is S1 + H.


PODS:
  - AWSAuthCore (2.6.32):
    - AWSCore (= 2.6.32)
  - AWSAuthUI (2.6.32):
    - AWSAuthCore (= 2.6.32)
    - AWSCore (= 2.6.32)
  - AWSCognitoIdentityProvider (2.6.32):
    - AWSCognitoIdentityProviderASF (= 1.0.1)
    - AWSCore (= 2.6.32)
  - AWSCognitoIdentityProviderASF (1.0.1)
  - AWSCore (2.6.32)
  - AWSDynamoDB (2.6.32):
    - AWSCore (= 2.6.32)
  - AWSFacebookSignIn (2.6.32):
    - AWSAuthCore (= 2.6.32)
    - FBSDKCoreKit (~> 4.0)
    - FBSDKLoginKit (~> 4.0)
  - AWSGoogleSignIn (2.6.32):
    - AWSAuthCore (= 2.6.32)
  - AWSMobileClient (2.6.32):
    - AWSAuthCore (= 2.6.32)
  - AWSUserPoolsSignIn (2.6.32):
    - AWSAuthCore (= 2.6.32)
    - AWSCognitoIdentityProvider (= 2.6.32)
  - Bolts (1.9.0):
    - Bolts/AppLinks (= 1.9.0)
    - Bolts/Tasks (= 1.9.0)
  - Bolts/AppLinks (1.9.0):
    - Bolts/Tasks
  - Bolts/Tasks (1.9.0)
  - FBSDKCoreKit (4.37.0):
    - Bolts (~> 1.7)
  - FBSDKLoginKit (4.37.0):
    - FBSDKCoreKit
  - GoogleSignIn (4.3.0):
    - "GoogleToolboxForMac/NSDictionary+URLArguments (~> 2.1)"
    - "GoogleToolboxForMac/NSString+URLArguments (~> 2.1)"
    - GTMOAuth2 (~> 1.0)
    - GTMSessionFetcher/Core (~> 1.1)
  - GoogleToolboxForMac/DebugUtils (2.1.4):
    - GoogleToolboxForMac/Defines (= 2.1.4)
  - GoogleToolboxForMac/Defines (2.1.4)
  - "GoogleToolboxForMac/NSDictionary+URLArguments (2.1.4)":
    - GoogleToolboxForMac/DebugUtils (= 2.1.4)
    - GoogleToolboxForMac/Defines (= 2.1.4)
    - "GoogleToolboxForMac/NSString+URLArguments (= 2.1.4)"
  - "GoogleToolboxForMac/NSString+URLArguments (2.1.4)"
  - GTMOAuth2 (1.1.6):
    - GTMSessionFetcher (~> 1.1)
  - GTMSessionFetcher (1.2.0):
    - GTMSessionFetcher/Full (= 1.2.0)
  - GTMSessionFetcher/Core (1.2.0)
  - GTMSessionFetcher/Full (1.2.0):
    - GTMSessionFetcher/Core (= 1.2.0)

DEPENDENCIES:
  - AWSAuthUI
  - AWSDynamoDB
  - AWSFacebookSignIn
  - AWSGoogleSignIn
  - AWSMobileClient
  - AWSUserPoolsSignIn
  - GoogleSignIn

SPEC REPOS:
  https://github.com/cocoapods/specs.git:
    - AWSAuthCore
    - AWSAuthUI
    - AWSCognitoIdentityProvider
    - AWSCognitoIdentityProviderASF
    - AWSCore
    - AWSDynamoDB
    - AWSFacebookSignIn
    - AWSGoogleSignIn
    - AWSMobileClient
    - AWSUserPoolsSignIn
    - Bolts
    - FBSDKCoreKit
    - FBSDKLoginKit
    - GoogleSignIn
    - GoogleToolboxForMac
    - GTMOAuth2
    - GTMSessionFetcher

SPEC CHECKSUMS:
  AWSAuthCore: dc80ff5a0773dfba6582a9ae2c87aad1e0482340
  AWSAuthUI: cfe596c2da182cd7b2a039805215e79eee7a362e
  AWSCognitoIdentityProvider: 1ac74ed3ddc96a1e072868c10d43f8630eebdfed
  AWSCognitoIdentityProviderASF: f94f1a502e72ef3d0a1de93e10bf7a79c8698118
  AWSCore: bfb49938a3a4eb190bc68edf1fa9e90969de8fa2
  AWSDynamoDB: ff96fea2198dd7ffdc78f7cc0f05876030437942
  AWSFacebookSignIn: 6f65e478f2af6c3a00e9998178461ddf9fc6fcdd
  AWSGoogleSignIn: 53e5f437f2cbeda9602f9bcbf5e193ae911d14c8
  AWSMobileClient: 958b97379bfa8090f37d89d381a3289adaf22a8f
  AWSUserPoolsSignIn: 59c2b5f5a767536009ee5f7630cd3fb1f287f7e6
  Bolts: ac6567323eac61e203f6a9763667d0f711be34c8
  FBSDKCoreKit: fe5f3474499a81963e11e3f3a5c753d0a95ca2b4
  FBSDKLoginKit: 2f7249686d1e30ce8a5ef5400eedf50b3e3df332
  GoogleSignIn: 11183592dc63e105475c7305a325045ff95e02b7
  GoogleToolboxForMac: 91c824d21e85b31c2aae9bb011c5027c9b4e738f
  GTMOAuth2: c77fe325e4acd453837e72d91e3b5f13116857b2
  GTMSessionFetcher: 0c4baf0a73acd0041bf9f71ea018deedab5ea84e

PODFILE CHECKSUM: 67cfb94c901762c3d610aec1b367d2d62d7b1086

COCOAPODS: 1.5.3
